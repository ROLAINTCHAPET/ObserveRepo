version: '3.8'
services:
  app:
    build: .
    container_name: webflux-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/observe_user
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=newpassword
      - logging.level.io.r2dbc.postgresql=DEBUG
      - logging.level.reactor.netty=DEBUG
      - logging.level.org.springframework.r2dbc=DEBUG
      # Logging configuration for file output
      - LOGGING_FILE_NAME=/app/logs/application.log
      - LOGGING_PATTERN_FILE=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
      - LOGGING_LEVEL_ROOT=INFO
        #opentelemetry
      - OTEL_SERVICE_NAME=webflux-app
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_RESOURCE_ATTRIBUTES=service.name=app,service.version=1.0.0
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://tempo:4318/v1/traces
      - OTEL_LOGS_EXPORTER=none
    volumes:
      - app-logs:/app/logs  # Mount volume for logs
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_DB=observe_user
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=newpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - loki
    networks:
      - app-network

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200" # HTTP API
      - "4318:4318" # OTLP/HTTP
    volumes:
      - ./tempo-config.yaml:/etc/tempo/config.yaml
      - ./tempo-data:/tmp/tempo
    command: -config.file=/etc/tempo/config.yaml
    networks:
      - app-network

  # Loki - Log storage and querying
  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    restart: unless-stopped
    volumes:
      - app-logs:/var/log/app:ro  # Read logs from shared volume
      - ./promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app-network

volumes:
  postgres_data:
  grafana_data:
  tempo_data:
  loki_data:
  app-logs:    # Shared volume for application logs

networks:
  app-network:
    driver: bridge